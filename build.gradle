def artifactoryCredentials = {
    username = project.property('artifactory.username')
    password = project.property('artifactory.apikey')
}

repositories {
    maven {
	    credentials artifactoryCredentials
        url "https://artifactory.sybit.de/libs-release"
        metadataSources {
            artifact()
        }
    }
}

configurations {
    runtime
}

dependencies {
    runtime "hybris:hybris-commerce-suite:${hybrisVersion}@zip"
	runtime "spartacus:spartacussampledata:2005@zip"
}

ext {
    isWindows = org.gradle.internal.os.OperatingSystem.current().isWindows()
    hybrisDir = "${projectDir}/hybris"
    hybrisBinDir = "${hybrisDir}/bin"
    hybrisPlatformDir = "${hybrisBinDir}/platform"
    hybrisConfigDir = "${hybrisDir}/config"
	installerDir = "${projectDir}/installer"
    customConfigDir = "${projectDir}/customconfig"
	customRecipeDir = "${projectDir}/customrecipe"
    antWorkingDir = getAntCmdWorkingDir()
}

defaultTasks "install"

"${project.property('antTasks')}".tokenize(',').each { taskName ->
    task "ant_${taskName}"(type: Exec) {
        group "Hybris Build Framework"
        workingDir = antWorkingDir
        executable = isWindows ? "cmd" : "sh"
        args = isWindows ? ["/c"] << getWindowsAntCmd(taskName) : ["-c"] << getUnixAntCmd(taskName)
    }
}

task initialize {
    dependsOn ant_initialize
}

task addCommerceVersionProperty {
	doLast{
		File localPropertiesFile = new File("$hybrisConfigDir/local.properties")
		def properties = new Properties()
		properties.load(new FileInputStream(localPropertiesFile))
		properties.put('commerce.version', project.property("hybrisVersion"))
		properties.store new FileOutputStream(localPropertiesFile), 'Generated during Vanilla Commerce installation'
	}
	finalizedBy initialize
}

task copyCustomConfigFiles {
	dependsOn 'runInstaller'
	doLast {
		logger.lifecycle "copy and merge config of ${customConfigDir} with ${hybrisConfigDir}"
        copy {
            from customConfigDir
            into hybrisConfigDir
            exclude "custom.properties"
        }
    }
	finalizedBy addCommerceVersionProperty
}

task runInstaller(type: Exec) {
	dependsOn 'unzipHybris'
	workingDir = installerDir
	executable = isWindows ? "cmd" : "sh"
	args = isWindows ? ["/c"] << "install.bat -r cx-spartacus -A initAdminPassword=nimda -A local_property:commerce.version=${project.property("hybrisVersion")}" : ["-c"] << "./install.sh -r cx-spartacus -A initAdminPassword=nimda -A local_property:commerce.version=${project.property("hybrisVersion")}"
	finalizedBy copyCustomConfigFiles
}

task copyCustomRecipe {
	doLast {
		copy {
			from customRecipeDir
			into "${installerDir}/recipes/cx-spartacus"
        }
	}
	finalizedBy runInstaller
}

task copyCustomLocalProperties {
	doLast {
		copy {
			from customConfigDir
			into "${installerDir}/customconfig"
			include "custom.properties"
        }
	}
	finalizedBy copyCustomRecipe
}

task unzipSpartacusSampleData {
    File zipFile = project.configurations.runtime.find { it.name.startsWith("spartacussampledata") }
    inputs.files zipFile
    doLast {
        logger.lifecycle "Unzipping ${zipFile.name}"
        copy {
            from zipTree(zipFile)
            into "${hybrisBinDir}/modules/spartacus"
        }
    }
	finalizedBy copyCustomLocalProperties
}

task unzipHybris {
    File zipFile = project.configurations.runtime.find { it.name.startsWith("hybris-commerce-suite") }
    inputs.files zipFile
    outputs.upToDateWhen { file(hybrisPlatformDir).exists() }
    doLast {
        if (file(hybrisBinDir).exists()) {
            deleteHybrisBinDir()
        }
        delete hybrisConfigDir
        logger.lifecycle "Unzipping ${zipFile.name}"
        copy {
            from zipTree(zipFile)
            into projectDir
        }
    }
	finalizedBy unzipSpartacusSampleData
}

task install {
    group "Hybris Project Buildr"
    description "Installs SAP Commerce"
    dependsOn 'unzipHybris'
}

private void deleteHybrisBinDir() {
    logger.lifecycle "Deleting ${hybrisBinDir}"
    ant.delete(includeEmptyDirs: true) {
        fileset(dir: hybrisBinDir) {
            include(name: "**/*")
            exclude(name: "custom/**")
        }
    }
}

private String getAntOpts(String antTask) {
    String antOpts = project.property("antOpts")
    if (antTask == "unittests") {
        project.properties.findAll {
            if (it.key.startsWith("testclasses") && !it.value.toString().isEmpty()) {
                antOpts <<= " -D${it.key}=${it.value}"
            }
        }
    }
    antOpts
}

private String getAntCmdWorkingDir() {
    def workingDir = hybrisPlatformDir
    if (project.hasProperty("extension")) {
        def dirs = []
        file(customExtensionsDir).traverse(nameFilter: ~/extensioninfo.xml/, maxDepth: 1) {
            if (it.parentFile.name == project.property("extension")) {
                dirs.add(it.parentFile)
            }
        }
        if (dirs.isEmpty()) {
            throw new IllegalArgumentException("Extension ${project.property("extension")} not found")
        }
        workingDir = dirs[0].path
    }
    workingDir
}

private String getWindowsAntCmd(String antTask) {
    def antPreCommand = "set \"ANT_OPTS=${getAntOpts(antTask)}\" & " +
            "set \"PLATFORM_HOME=${hybrisPlatformDir}\" & " +
            "set \"ANT_HOME=${hybrisPlatformDir}\\apache-ant\" & " +
            "set \"PATH=${hybrisPlatformDir}\\apache-ant\\bin;%PATH%\""
    "${antPreCommand} & ant ${antTask}"
}

private String getUnixAntCmd(String antTask) {
    def antPreCommand = "export PLATFORM_HOME=\"${hybrisPlatformDir}\" && " +
            "export ANT_OPTS=\"${getAntOpts(antTask)}\" && " +
            "export ANT_HOME=\"${hybrisPlatformDir}/apache-ant\" && " +
            "chmod +x \"${hybrisPlatformDir}/apache-ant/bin/ant\" && "
    antPreCommand += ' export PATH=\"$ANT_HOME/bin:$PATH\" && '
    "${antPreCommand} ant ${antTask}"
}